/*
 Copyright 2018-2019 Google Inc.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

#include <vkex/ToString.h>

namespace vkex {

const char* k_new_line = "\n";

std::string ToString(uint32_t value, const vkex::TextFormat& format)
{
  std::stringstream ss;
  ss << value;
  return ss.str();
}

std::string ToString(float value, const vkex::TextFormat& format)
{
  std::stringstream ss;
  ss << value;
  return ss.str();
}

std::string ToString(const char* value, const vkex::TextFormat& format)
{
  return (value != nullptr) ? value : "";
}

std::string ToString(VkResult value)
{
  switch (value) {
    default: break;
    case VK_SUCCESS                                            : return"VK_SUCCESS"; break;
    case VK_NOT_READY                                          : return"VK_NOT_READY"; break;
    case VK_TIMEOUT                                            : return"VK_TIMEOUT"; break;
    case VK_EVENT_SET                                          : return"VK_EVENT_SET"; break;
    case VK_EVENT_RESET                                        : return"VK_EVENT_RESET"; break;
    case VK_INCOMPLETE                                         : return"VK_INCOMPLETE"; break;
    case VK_ERROR_OUT_OF_HOST_MEMORY                           : return"VK_ERROR_OUT_OF_HOST_MEMORY"; break;
    case VK_ERROR_OUT_OF_DEVICE_MEMORY                         : return"VK_ERROR_OUT_OF_DEVICE_MEMORY"; break;
    case VK_ERROR_INITIALIZATION_FAILED                        : return"VK_ERROR_INITIALIZATION_FAILED"; break;
    case VK_ERROR_DEVICE_LOST                                  : return"VK_ERROR_DEVICE_LOST"; break;
    case VK_ERROR_MEMORY_MAP_FAILED                            : return"VK_ERROR_MEMORY_MAP_FAILED"; break;
    case VK_ERROR_LAYER_NOT_PRESENT                            : return"VK_ERROR_LAYER_NOT_PRESENT"; break;
    case VK_ERROR_EXTENSION_NOT_PRESENT                        : return"VK_ERROR_EXTENSION_NOT_PRESENT"; break;
    case VK_ERROR_FEATURE_NOT_PRESENT                          : return"VK_ERROR_FEATURE_NOT_PRESENT"; break;
    case VK_ERROR_INCOMPATIBLE_DRIVER                          : return"VK_ERROR_INCOMPATIBLE_DRIVER"; break;
    case VK_ERROR_TOO_MANY_OBJECTS                             : return"VK_ERROR_TOO_MANY_OBJECTS"; break;
    case VK_ERROR_FORMAT_NOT_SUPPORTED                         : return"VK_ERROR_FORMAT_NOT_SUPPORTED"; break;
    case VK_ERROR_FRAGMENTED_POOL                              : return"VK_ERROR_FRAGMENTED_POOL"; break;
    case VK_ERROR_OUT_OF_POOL_MEMORY                           : return"VK_ERROR_OUT_OF_POOL_MEMORY"; break;
    case VK_ERROR_INVALID_EXTERNAL_HANDLE                      : return"VK_ERROR_INVALID_EXTERNAL_HANDLE"; break;
    case VK_ERROR_SURFACE_LOST_KHR                             : return"VK_ERROR_SURFACE_LOST_KHR"; break;
    case VK_ERROR_NATIVE_WINDOW_IN_USE_KHR                     : return"VK_ERROR_NATIVE_WINDOW_IN_USE_KHR"; break;
    case VK_SUBOPTIMAL_KHR                                     : return"VK_SUBOPTIMAL_KHR"; break;
    case VK_ERROR_OUT_OF_DATE_KHR                              : return"VK_ERROR_OUT_OF_DATE_KHR"; break;
    case VK_ERROR_INCOMPATIBLE_DISPLAY_KHR                     : return"VK_ERROR_INCOMPATIBLE_DISPLAY_KHR"; break;
    case VK_ERROR_VALIDATION_FAILED_EXT                        : return"VK_ERROR_VALIDATION_FAILED_EXT"; break;
    case VK_ERROR_INVALID_SHADER_NV                            : return"VK_ERROR_INVALID_SHADER_NV"; break;
    case VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT : return"VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT"; break;
    case VK_ERROR_FRAGMENTATION_EXT                            : return"VK_ERROR_FRAGMENTATION_EXT"; break;
    case VK_ERROR_NOT_PERMITTED_EXT                            : return"VK_ERROR_NOT_PERMITTED_EXT"; break;
#if VK_HEADER_VERSION > 100
    case VK_ERROR_INVALID_DEVICE_ADDRESS_EXT                   : return"VK_ERROR_INVALID_DEVICE_ADDRESS_EXT"; break;
#endif
  }
  return "<UNKNOWN>";
}

std::string ToString(VkStructureType value)
{
  switch (value) {
    default: break;
    case VK_STRUCTURE_TYPE_APPLICATION_INFO                                                : return "VK_STRUCTURE_TYPE_APPLICATION_INFO"; break;
    case VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO                                            : return "VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO                                        : return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO                                              : return "VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_SUBMIT_INFO                                                     : return "VK_STRUCTURE_TYPE_SUBMIT_INFO"; break;
    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO                                            : return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO"; break;
    case VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE                                             : return "VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE"; break;
    case VK_STRUCTURE_TYPE_BIND_SPARSE_INFO                                                : return "VK_STRUCTURE_TYPE_BIND_SPARSE_INFO"; break;
    case VK_STRUCTURE_TYPE_FENCE_CREATE_INFO                                               : return "VK_STRUCTURE_TYPE_FENCE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO                                           : return "VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_EVENT_CREATE_INFO                                               : return "VK_STRUCTURE_TYPE_EVENT_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO                                          : return "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO                                              : return "VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO                                         : return "VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO                                               : return "VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO                                          : return "VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO                                       : return "VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO                                      : return "VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO                               : return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO                         : return "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO                       : return "VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO                         : return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO                             : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO                        : return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO                          : return "VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO                        : return "VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO                          : return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO                              : return "VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO                                   : return "VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO                                    : return "VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO                                     : return "VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO                                             : return "VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO                               : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO                                     : return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO                                    : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO"; break;
    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET                                            : return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET"; break;
    case VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET                                             : return "VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET"; break;
    case VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO                                         : return "VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO                                         : return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO                                        : return "VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO                                    : return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO"; break;
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO                                 : return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO"; break;
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO                                       : return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO"; break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO                                          : return "VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO"; break;
    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER                                           : return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER"; break;
    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER                                            : return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER"; break;
    case VK_STRUCTURE_TYPE_MEMORY_BARRIER                                                  : return "VK_STRUCTURE_TYPE_MEMORY_BARRIER"; break;
    case VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO                                     : return "VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO                                       : return "VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES                             : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO                                         : return "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO"; break;
    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO                                          : return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES                          : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES"; break;
    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS                                   : return "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS"; break;
    case VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO                                  : return "VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO"; break;
    case VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO                                      : return "VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO"; break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO                             : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO"; break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO                          : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO"; break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO                                        : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO"; break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO                                   : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO"; break;
    case VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO                            : return "VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO"; break;
    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO                             : return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES                                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO                                 : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2                               : return "VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2"; break;
    case VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2                                : return "VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2"; break;
    case VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2                         : return "VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2"; break;
    case VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2                                           : return "VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2"; break;
    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2                              : return "VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2                                      : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2                                    : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2"; break;
    case VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2                                             : return "VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2"; break;
    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2                                       : return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2                             : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2"; break;
    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2                                       : return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2                             : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2"; break;
    case VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2                                : return "VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2                      : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES                       : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO                 : return "VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO                                    : return "VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO           : return "VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO                               : return "VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES                              : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES                            : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES                      : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES"; break;
    case VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO                                           : return "VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES                       : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES                     : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2                                             : return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2"; break;
    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO                            : return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO                                   : return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO"; break;
    case VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO                                    : return "VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO"; break;
    case VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO                            : return "VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES               : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES"; break;
    case VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES                : return "VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO                          : return "VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO                      : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO"; break;
    case VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES                                : return "VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO                            : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO"; break;
    case VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES                                      : return "VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES                                   : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO                              : return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO                               : return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO                                     : return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO                             : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO"; break;
    case VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES                                       : return "VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO                                        : return "VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO                                    : return "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO                         : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO"; break;
    case VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES                                   : return "VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES                        : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES"; break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT                                   : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES                 : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES"; break;
    case VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR                                       : return "VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_PRESENT_INFO_KHR                                                : return "VK_STRUCTURE_TYPE_PRESENT_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR                           : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR"; break;
    case VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR                                 : return "VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR                            : return "VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR                                     : return "VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR                                   : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR                          : return "VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR                                    : return "VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR                                 : return "VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR                                        : return "VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR                                    : return "VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR                                     : return "VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR                                 : return "VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR                                 : return "VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR                                   : return "VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT                           : return "VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD            : return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD"; break;
    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT                               : return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT                                : return "VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT                                    : return "VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV                       : return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV                      : return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV                    : return "VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT                 : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT               : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT             : return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX                                      : return "VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX"; break;
    case VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD                        : return "VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD"; break;
    case VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP                       : return "VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV                            : return "VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV                                  : return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV                              : return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV                              : return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV                       : return "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT                                            : return "VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT"; break;
    case VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN                                       : return "VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT       : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT                                 : return "VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT                        : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR                             : return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR                             : return "VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR                              : return "VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR"; break;
    case VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR                                : return "VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR                                       : return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR                                        : return "VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR"; break;
    case VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR                                          : return "VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR                      : return "VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                          : return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR                          : return "VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR                                     : return "VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR                             : return "VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR                                    : return "VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR                                       : return "VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR                  : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR"; break;
    case VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT       : return "VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT              : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT                            : return "VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR"; break;
    case VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR                                             : return "VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR"; break;
    //case VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX                                    : return "VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX"; break;
    //case VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX                        : return "VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX"; break;
    //case VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX                                   : return "VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX"; break;
    //case VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX                         : return "VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX"; break;
    //case VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX                            : return "VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX"; break;
    //case VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX                          : return "VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV                : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT                                      : return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT"; break;
    case VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT                                          : return "VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT                                           : return "VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT                                          : return "VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT                               : return "VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE                                       : return "VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX    : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV                  : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT                : return "VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT       : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT       : return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT                  : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT         : return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_HDR_METADATA_EXT                                                : return "VK_STRUCTURE_TYPE_HDR_METADATA_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR              : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR"; break;
    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR                         : return "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR                           : return "VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR                           : return "VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR                                    : return "VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR"; break;
    case VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR                                      : return "VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR"; break;
    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR                                       : return "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR"; break;
    case VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR                                        : return "VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR"; break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR                                   : return "VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR"; break;
    case VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR                                          : return "VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR                                            : return "VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR                         : return "VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR"; break;
    case VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR                              : return "VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR                              : return "VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR                                 : return "VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR                                        : return "VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR                                           : return "VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR                              : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR"; break;
    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR                                      : return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR"; break;
    case VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR                                            : return "VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR"; break;
    case VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR                                        : return "VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR"; break;
    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR                                  : return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR"; break;
    case VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR                                   : return "VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR"; break;
    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR                                        : return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR"; break;
    case VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR                                : return "VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR"; break;
    case VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK                                     : return "VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK"; break;
    case VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK                                   : return "VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK"; break;
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT                                : return "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT                                 : return "VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT                                           : return "VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT"; break;
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT                         : return "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT"; break;
    case VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT                           : return "VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID                           : return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID"; break;
    case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID                      : return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID"; break;
    case VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID               : return "VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID"; break;
    case VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID                     : return "VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"; break;
    case VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID                 : return "VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID"; break;
    case VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID                                         : return "VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT            : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT                          : return "VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT               : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT             : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT                   : return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT"; break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT            : return "VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT                                       : return "VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT                     : return "VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT                 : return "VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT                 : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT                                      : return "VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR                               : return "VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT           : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT         : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT             : return "VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV                 : return "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV               : return "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV                  : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV"; break;
    case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT                         : return "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT"; break;
    case VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT                              : return "VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT              : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT                  : return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT              : return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT                        : return "VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT                                : return "VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT                  : return "VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT             : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT              : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT      : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT     : return "VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV       : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV                  : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV      : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV                             : return "VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV                           : return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_GEOMETRY_NV                                                     : return "VK_STRUCTURE_TYPE_GEOMETRY_NV"; break;
    case VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV                                           : return "VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV"; break;
    case VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV                                                : return "VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV"; break;
    case VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV                      : return "VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV                  : return "VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV"; break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV              : return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV                       : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV"; break;
    case VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV                         : return "VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV                                  : return "VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV        : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV      : return "VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT             : return "VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT                    : return "VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR     : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR                       : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR"; break;
    case VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT                             : return "VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT                              : return "VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT             : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR                       : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD                       : return "VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD"; break;
    case VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT                                   : return "VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD                      : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD"; break;
    case VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD                    : return "VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT         : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT             : return "VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT           : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP                                         : return "VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT                      : return "VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR                           : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR                   : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR            : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR"; break;
    case VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR                   : return "VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV          : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV                         : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV                       : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV         : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV              : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV        : return "VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV                   : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV                                              : return "VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV"; break;
    case VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV                           : return "VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR                 : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR               : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR"; break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR                                  : return "VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR                              : return "VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR                                         : return "VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR                                       : return "VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL       : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL"; break;
    case VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL                                    : return "VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL"; break;
    case VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL                           : return "VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL"; break;
    case VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL                                   : return "VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL"; break;
    case VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL                            : return "VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL"; break;
    case VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL                                 : return "VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL"; break;
    case VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL                    : return "VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT                     : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD                     : return "VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD"; break;
    case VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD                    : return "VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD"; break;
    case VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA                           : return "VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA"; break;
    case VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT                                   : return "VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT               : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT             : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT                : return "VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT            : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT    : return "VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT              : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD                    : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD                    : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT                    : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT                    : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT                               : return "VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR                              : return "VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT              : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT                                  : return "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT                           : return "VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT                             : return "VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT                                         : return "VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV                  : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV                                : return "VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV                : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV             : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV                : return "VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV"; break;
    case VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV                        : return "VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT          : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT                 : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR     : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR"; break;
    case VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT                          : return "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT                  : return "VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT"; break;
    case VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT                    : return "VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT                                : return "VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT                 : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT               : return "VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT               : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT                   : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT                   : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR     : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR                                               : return "VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR                              : return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR                                    : return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR                               : return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR"; break;
    case VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR                 : return "VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT             : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT"; break;
    case VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT           : return "VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT"; break;
  }
  return "<UNKNOWN>";
}

std::string ToStringShort(VkPhysicalDeviceType value)
{
  switch (value) {
    default                                     : break;
    case VK_PHYSICAL_DEVICE_TYPE_OTHER          : return "OTHER"; break;
    case VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU : return "INTEGRATED_GPU"; break;
    case VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU   : return "DISCRETE_GPU"; break;
    case VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU    : return "VIRTUAL_GPU"; break;
    case VK_PHYSICAL_DEVICE_TYPE_CPU            : return "CPU "; break;
  }
  return "<UNKNOWN>";
}

std::string ToString(VkPhysicalDeviceType value)
{
  switch (value) {
    default                                     : break;
    case VK_PHYSICAL_DEVICE_TYPE_OTHER          : return "VK_PHYSICAL_DEVICE_TYPE_OTHER"; break;
    case VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU : return "VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU"; break;
    case VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU   : return "VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU"; break;
    case VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU    : return "VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU"; break;
    case VK_PHYSICAL_DEVICE_TYPE_CPU            : return "VK_PHYSICAL_DEVICE_TYPE_CPU "; break;
  }
  return "<UNKNOWN>";
}

std::string ToStringShort(VkFormat value)
{
  switch (value) {
    default                                                    : break;
    case VK_FORMAT_UNDEFINED                                   : return "UNDEFINED"; break;
    case VK_FORMAT_R4G4_UNORM_PACK8                            : return "R4G4_UNORM_PACK8"; break;
    case VK_FORMAT_R4G4B4A4_UNORM_PACK16                       : return "R4G4B4A4_UNORM_PACK16"; break;
    case VK_FORMAT_B4G4R4A4_UNORM_PACK16                       : return "B4G4R4A4_UNORM_PACK16"; break;
    case VK_FORMAT_R5G6B5_UNORM_PACK16                         : return "R5G6B5_UNORM_PACK16"; break;
    case VK_FORMAT_B5G6R5_UNORM_PACK16                         : return "B5G6R5_UNORM_PACK16"; break;
    case VK_FORMAT_R5G5B5A1_UNORM_PACK16                       : return "R5G5B5A1_UNORM_PACK16"; break;
    case VK_FORMAT_B5G5R5A1_UNORM_PACK16                       : return "B5G5R5A1_UNORM_PACK16"; break;
    case VK_FORMAT_A1R5G5B5_UNORM_PACK16                       : return "A1R5G5B5_UNORM_PACK16"; break;
    case VK_FORMAT_R8_UNORM                                    : return "R8_UNORM"; break;
    case VK_FORMAT_R8_SNORM                                    : return "R8_SNORM"; break;
    case VK_FORMAT_R8_USCALED                                  : return "R8_USCALED"; break;
    case VK_FORMAT_R8_SSCALED                                  : return "R8_SSCALED"; break;
    case VK_FORMAT_R8_UINT                                     : return "R8_UINT"; break;
    case VK_FORMAT_R8_SINT                                     : return "R8_SINT"; break;
    case VK_FORMAT_R8_SRGB                                     : return "R8_SRGB"; break;
    case VK_FORMAT_R8G8_UNORM                                  : return "R8G8_UNORM"; break;
    case VK_FORMAT_R8G8_SNORM                                  : return "R8G8_SNORM"; break;
    case VK_FORMAT_R8G8_USCALED                                : return "R8G8_USCALED"; break;
    case VK_FORMAT_R8G8_SSCALED                                : return "R8G8_SSCALED"; break;
    case VK_FORMAT_R8G8_UINT                                   : return "R8G8_UINT"; break;
    case VK_FORMAT_R8G8_SINT                                   : return "R8G8_SINT"; break;
    case VK_FORMAT_R8G8_SRGB                                   : return "R8G8_SRGB"; break;
    case VK_FORMAT_R8G8B8_UNORM                                : return "R8G8B8_UNORM"; break;
    case VK_FORMAT_R8G8B8_SNORM                                : return "R8G8B8_SNORM"; break;
    case VK_FORMAT_R8G8B8_USCALED                              : return "R8G8B8_USCALED"; break;
    case VK_FORMAT_R8G8B8_SSCALED                              : return "R8G8B8_SSCALED"; break;
    case VK_FORMAT_R8G8B8_UINT                                 : return "R8G8B8_UINT"; break;
    case VK_FORMAT_R8G8B8_SINT                                 : return "R8G8B8_SINT"; break;
    case VK_FORMAT_R8G8B8_SRGB                                 : return "R8G8B8_SRGB"; break;
    case VK_FORMAT_B8G8R8_UNORM                                : return "B8G8R8_UNORM"; break;
    case VK_FORMAT_B8G8R8_SNORM                                : return "B8G8R8_SNORM"; break;
    case VK_FORMAT_B8G8R8_USCALED                              : return "B8G8R8_USCALED"; break;
    case VK_FORMAT_B8G8R8_SSCALED                              : return "B8G8R8_SSCALED"; break;
    case VK_FORMAT_B8G8R8_UINT                                 : return "B8G8R8_UINT"; break;
    case VK_FORMAT_B8G8R8_SINT                                 : return "B8G8R8_SINT"; break;
    case VK_FORMAT_B8G8R8_SRGB                                 : return "B8G8R8_SRGB"; break;
    case VK_FORMAT_R8G8B8A8_UNORM                              : return "R8G8B8A8_UNORM"; break;
    case VK_FORMAT_R8G8B8A8_SNORM                              : return "R8G8B8A8_SNORM"; break;
    case VK_FORMAT_R8G8B8A8_USCALED                            : return "R8G8B8A8_USCALED"; break;
    case VK_FORMAT_R8G8B8A8_SSCALED                            : return "R8G8B8A8_SSCALED"; break;
    case VK_FORMAT_R8G8B8A8_UINT                               : return "R8G8B8A8_UINT"; break;
    case VK_FORMAT_R8G8B8A8_SINT                               : return "R8G8B8A8_SINT"; break;
    case VK_FORMAT_R8G8B8A8_SRGB                               : return "R8G8B8A8_SRGB"; break;
    case VK_FORMAT_B8G8R8A8_UNORM                              : return "B8G8R8A8_UNORM"; break;
    case VK_FORMAT_B8G8R8A8_SNORM                              : return "B8G8R8A8_SNORM"; break;
    case VK_FORMAT_B8G8R8A8_USCALED                            : return "B8G8R8A8_USCALED"; break;
    case VK_FORMAT_B8G8R8A8_SSCALED                            : return "B8G8R8A8_SSCALED"; break;
    case VK_FORMAT_B8G8R8A8_UINT                               : return "B8G8R8A8_UINT"; break;
    case VK_FORMAT_B8G8R8A8_SINT                               : return "B8G8R8A8_SINT"; break;
    case VK_FORMAT_B8G8R8A8_SRGB                               : return "B8G8R8A8_SRGB"; break;
    case VK_FORMAT_A8B8G8R8_UNORM_PACK32                       : return "A8B8G8R8_UNORM_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_SNORM_PACK32                       : return "A8B8G8R8_SNORM_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_USCALED_PACK32                     : return "A8B8G8R8_USCALED_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_SSCALED_PACK32                     : return "A8B8G8R8_SSCALED_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_UINT_PACK32                        : return "A8B8G8R8_UINT_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_SINT_PACK32                        : return "A8B8G8R8_SINT_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_SRGB_PACK32                        : return "A8B8G8R8_SRGB_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_UNORM_PACK32                    : return "A2R10G10B10_UNORM_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_SNORM_PACK32                    : return "A2R10G10B10_SNORM_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_USCALED_PACK32                  : return "A2R10G10B10_USCALED_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_SSCALED_PACK32                  : return "A2R10G10B10_SSCALED_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_UINT_PACK32                     : return "A2R10G10B10_UINT_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_SINT_PACK32                     : return "A2R10G10B10_SINT_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_UNORM_PACK32                    : return "A2B10G10R10_UNORM_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_SNORM_PACK32                    : return "A2B10G10R10_SNORM_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_USCALED_PACK32                  : return "A2B10G10R10_USCALED_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_SSCALED_PACK32                  : return "A2B10G10R10_SSCALED_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_UINT_PACK32                     : return "A2B10G10R10_UINT_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_SINT_PACK32                     : return "A2B10G10R10_SINT_PACK32"; break;
    case VK_FORMAT_R16_UNORM                                   : return "R16_UNORM"; break;
    case VK_FORMAT_R16_SNORM                                   : return "R16_SNORM"; break;
    case VK_FORMAT_R16_USCALED                                 : return "R16_USCALED"; break;
    case VK_FORMAT_R16_SSCALED                                 : return "R16_SSCALED"; break;
    case VK_FORMAT_R16_UINT                                    : return "R16_UINT"; break;
    case VK_FORMAT_R16_SINT                                    : return "R16_SINT"; break;
    case VK_FORMAT_R16_SFLOAT                                  : return "R16_SFLOAT"; break;
    case VK_FORMAT_R16G16_UNORM                                : return "R16G16_UNORM"; break;
    case VK_FORMAT_R16G16_SNORM                                : return "R16G16_SNORM"; break;
    case VK_FORMAT_R16G16_USCALED                              : return "R16G16_USCALED"; break;
    case VK_FORMAT_R16G16_SSCALED                              : return "R16G16_SSCALED"; break;
    case VK_FORMAT_R16G16_UINT                                 : return "R16G16_UINT"; break;
    case VK_FORMAT_R16G16_SINT                                 : return "R16G16_SINT"; break;
    case VK_FORMAT_R16G16_SFLOAT                               : return "R16G16_SFLOAT"; break;
    case VK_FORMAT_R16G16B16_UNORM                             : return "R16G16B16_UNORM"; break;
    case VK_FORMAT_R16G16B16_SNORM                             : return "R16G16B16_SNORM"; break;
    case VK_FORMAT_R16G16B16_USCALED                           : return "R16G16B16_USCALED"; break;
    case VK_FORMAT_R16G16B16_SSCALED                           : return "R16G16B16_SSCALED"; break;
    case VK_FORMAT_R16G16B16_UINT                              : return "R16G16B16_UINT"; break;
    case VK_FORMAT_R16G16B16_SINT                              : return "R16G16B16_SINT"; break;
    case VK_FORMAT_R16G16B16_SFLOAT                            : return "R16G16B16_SFLOAT"; break;
    case VK_FORMAT_R16G16B16A16_UNORM                          : return "R16G16B16A16_UNORM"; break;
    case VK_FORMAT_R16G16B16A16_SNORM                          : return "R16G16B16A16_SNORM"; break;
    case VK_FORMAT_R16G16B16A16_USCALED                        : return "R16G16B16A16_USCALED"; break;
    case VK_FORMAT_R16G16B16A16_SSCALED                        : return "R16G16B16A16_SSCALED"; break;
    case VK_FORMAT_R16G16B16A16_UINT                           : return "R16G16B16A16_UINT"; break;
    case VK_FORMAT_R16G16B16A16_SINT                           : return "R16G16B16A16_SINT"; break;
    case VK_FORMAT_R16G16B16A16_SFLOAT                         : return "R16G16B16A16_SFLOAT"; break;
    case VK_FORMAT_R32_UINT                                    : return "R32_UINT"; break;
    case VK_FORMAT_R32_SINT                                    : return "R32_SINT"; break;
    case VK_FORMAT_R32_SFLOAT                                  : return "R32_SFLOAT"; break;
    case VK_FORMAT_R32G32_UINT                                 : return "R32G32_UINT"; break;
    case VK_FORMAT_R32G32_SINT                                 : return "R32G32_SINT"; break;
    case VK_FORMAT_R32G32_SFLOAT                               : return "R32G32_SFLOAT"; break;
    case VK_FORMAT_R32G32B32_UINT                              : return "R32G32B32_UINT"; break;
    case VK_FORMAT_R32G32B32_SINT                              : return "R32G32B32_SINT"; break;
    case VK_FORMAT_R32G32B32_SFLOAT                            : return "R32G32B32_SFLOAT"; break;
    case VK_FORMAT_R32G32B32A32_UINT                           : return "R32G32B32A32_UINT"; break;
    case VK_FORMAT_R32G32B32A32_SINT                           : return "R32G32B32A32_SINT"; break;
    case VK_FORMAT_R32G32B32A32_SFLOAT                         : return "R32G32B32A32_SFLOAT"; break;
    case VK_FORMAT_R64_UINT                                    : return "R64_UINT"; break;
    case VK_FORMAT_R64_SINT                                    : return "R64_SINT"; break;
    case VK_FORMAT_R64_SFLOAT                                  : return "R64_SFLOAT"; break;
    case VK_FORMAT_R64G64_UINT                                 : return "R64G64_UINT"; break;
    case VK_FORMAT_R64G64_SINT                                 : return "R64G64_SINT"; break;
    case VK_FORMAT_R64G64_SFLOAT                               : return "R64G64_SFLOAT"; break;
    case VK_FORMAT_R64G64B64_UINT                              : return "R64G64B64_UINT"; break;
    case VK_FORMAT_R64G64B64_SINT                              : return "R64G64B64_SINT"; break;
    case VK_FORMAT_R64G64B64_SFLOAT                            : return "R64G64B64_SFLOAT"; break;
    case VK_FORMAT_R64G64B64A64_UINT                           : return "R64G64B64A64_UINT"; break;
    case VK_FORMAT_R64G64B64A64_SINT                           : return "R64G64B64A64_SINT"; break;
    case VK_FORMAT_R64G64B64A64_SFLOAT                         : return "R64G64B64A64_SFLOAT"; break;
    case VK_FORMAT_B10G11R11_UFLOAT_PACK32                     : return "B10G11R11_UFLOAT_PACK32"; break;
    case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32                      : return "E5B9G9R9_UFLOAT_PACK32"; break;
    case VK_FORMAT_D16_UNORM                                   : return "D16_UNORM"; break;
    case VK_FORMAT_X8_D24_UNORM_PACK32                         : return "X8_D24_UNORM_PACK32"; break;
    case VK_FORMAT_D32_SFLOAT                                  : return "D32_SFLOAT"; break;
    case VK_FORMAT_S8_UINT                                     : return "S8_UINT"; break;
    case VK_FORMAT_D16_UNORM_S8_UINT                           : return "D16_UNORM_S8_UINT"; break;
    case VK_FORMAT_D24_UNORM_S8_UINT                           : return "D24_UNORM_S8_UINT"; break;
    case VK_FORMAT_D32_SFLOAT_S8_UINT                          : return "D32_SFLOAT_S8_UINT"; break;
    case VK_FORMAT_BC1_RGB_UNORM_BLOCK                         : return "BC1_RGB_UNORM_BLOCK"; break;
    case VK_FORMAT_BC1_RGB_SRGB_BLOCK                          : return "BC1_RGB_SRGB_BLOCK"; break;
    case VK_FORMAT_BC1_RGBA_UNORM_BLOCK                        : return "BC1_RGBA_UNORM_BLOCK"; break;
    case VK_FORMAT_BC1_RGBA_SRGB_BLOCK                         : return "BC1_RGBA_SRGB_BLOCK"; break;
    case VK_FORMAT_BC2_UNORM_BLOCK                             : return "BC2_UNORM_BLOCK"; break;
    case VK_FORMAT_BC2_SRGB_BLOCK                              : return "BC2_SRGB_BLOCK"; break;
    case VK_FORMAT_BC3_UNORM_BLOCK                             : return "BC3_UNORM_BLOCK"; break;
    case VK_FORMAT_BC3_SRGB_BLOCK                              : return "BC3_SRGB_BLOCK"; break;
    case VK_FORMAT_BC4_UNORM_BLOCK                             : return "BC4_UNORM_BLOCK"; break;
    case VK_FORMAT_BC4_SNORM_BLOCK                             : return "BC4_SNORM_BLOCK"; break;
    case VK_FORMAT_BC5_UNORM_BLOCK                             : return "BC5_UNORM_BLOCK"; break;
    case VK_FORMAT_BC5_SNORM_BLOCK                             : return "BC5_SNORM_BLOCK"; break;
    case VK_FORMAT_BC6H_UFLOAT_BLOCK                           : return "BC6H_UFLOAT_BLOCK"; break;
    case VK_FORMAT_BC6H_SFLOAT_BLOCK                           : return "BC6H_SFLOAT_BLOCK"; break;
    case VK_FORMAT_BC7_UNORM_BLOCK                             : return "BC7_UNORM_BLOCK"; break;
    case VK_FORMAT_BC7_SRGB_BLOCK                              : return "BC7_SRGB_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK                     : return "ETC2_R8G8B8_UNORM_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK                      : return "ETC2_R8G8B8_SRGB_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK                   : return "ETC2_R8G8B8A1_UNORM_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK                    : return "ETC2_R8G8B8A1_SRGB_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK                   : return "ETC2_R8G8B8A8_UNORM_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK                    : return "ETC2_R8G8B8A8_SRGB_BLOCK"; break;
    case VK_FORMAT_EAC_R11_UNORM_BLOCK                         : return "EAC_R11_UNORM_BLOCK"; break;
    case VK_FORMAT_EAC_R11_SNORM_BLOCK                         : return "EAC_R11_SNORM_BLOCK"; break;
    case VK_FORMAT_EAC_R11G11_UNORM_BLOCK                      : return "EAC_R11G11_UNORM_BLOCK"; break;
    case VK_FORMAT_EAC_R11G11_SNORM_BLOCK                      : return "EAC_R11G11_SNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_4x4_UNORM_BLOCK                        : return "ASTC_4x4_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_4x4_SRGB_BLOCK                         : return "ASTC_4x4_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_5x4_UNORM_BLOCK                        : return "ASTC_5x4_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_5x4_SRGB_BLOCK                         : return "ASTC_5x4_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_5x5_UNORM_BLOCK                        : return "ASTC_5x5_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_5x5_SRGB_BLOCK                         : return "ASTC_5x5_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_6x5_UNORM_BLOCK                        : return "ASTC_6x5_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_6x5_SRGB_BLOCK                         : return "ASTC_6x5_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_6x6_UNORM_BLOCK                        : return "ASTC_6x6_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_6x6_SRGB_BLOCK                         : return "ASTC_6x6_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_8x5_UNORM_BLOCK                        : return "ASTC_8x5_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_8x5_SRGB_BLOCK                         : return "ASTC_8x5_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_8x6_UNORM_BLOCK                        : return "ASTC_8x6_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_8x6_SRGB_BLOCK                         : return "ASTC_8x6_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_8x8_UNORM_BLOCK                        : return "ASTC_8x8_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_8x8_SRGB_BLOCK                         : return "ASTC_8x8_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_10x5_UNORM_BLOCK                       : return "ASTC_10x5_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_10x5_SRGB_BLOCK                        : return "ASTC_10x5_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_10x6_UNORM_BLOCK                       : return "ASTC_10x6_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_10x6_SRGB_BLOCK                        : return "ASTC_10x6_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_10x8_UNORM_BLOCK                       : return "ASTC_10x8_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_10x8_SRGB_BLOCK                        : return "ASTC_10x8_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_10x10_UNORM_BLOCK                      : return "ASTC_10x10_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_10x10_SRGB_BLOCK                       : return "ASTC_10x10_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_12x10_UNORM_BLOCK                      : return "ASTC_12x10_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_12x10_SRGB_BLOCK                       : return "ASTC_12x10_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_12x12_UNORM_BLOCK                      : return "ASTC_12x12_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_12x12_SRGB_BLOCK                       : return "ASTC_12x12_SRGB_BLOCK"; break;
    case VK_FORMAT_G8B8G8R8_422_UNORM                          : return "G8B8G8R8_422_UNORM"; break;
    case VK_FORMAT_B8G8R8G8_422_UNORM                          : return "B8G8R8G8_422_UNORM"; break;
    case VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM                   : return "G8_B8_R8_3PLANE_420_UNORM"; break;
    case VK_FORMAT_G8_B8R8_2PLANE_420_UNORM                    : return "G8_B8R8_2PLANE_420_UNORM"; break;
    case VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM                   : return "G8_B8_R8_3PLANE_422_UNORM"; break;
    case VK_FORMAT_G8_B8R8_2PLANE_422_UNORM                    : return "G8_B8R8_2PLANE_422_UNORM"; break;
    case VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM                   : return "G8_B8_R8_3PLANE_444_UNORM"; break;
    case VK_FORMAT_R10X6_UNORM_PACK16                          : return "R10X6_UNORM_PACK16"; break;
    case VK_FORMAT_R10X6G10X6_UNORM_2PACK16                    : return "R10X6G10X6_UNORM_2PACK16"; break;
    case VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16          : return "R10X6G10X6B10X6A10X6_UNORM_4PACK16"; break;
    case VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16      : return "G10X6B10X6G10X6R10X6_422_UNORM_4PACK16"; break;
    case VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16      : return "B10X6G10X6R10X6G10X6_422_UNORM_4PACK16"; break;
    case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16  : return "G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16"; break;
    case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16   : return "G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16"; break;
    case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16  : return "G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16"; break;
    case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16   : return "G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16"; break;
    case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16  : return "G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16"; break;
    case VK_FORMAT_R12X4_UNORM_PACK16                          : return "R12X4_UNORM_PACK16"; break;
    case VK_FORMAT_R12X4G12X4_UNORM_2PACK16                    : return "R12X4G12X4_UNORM_2PACK16"; break;
    case VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16          : return "R12X4G12X4B12X4A12X4_UNORM_4PACK16"; break;
    case VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16      : return "G12X4B12X4G12X4R12X4_422_UNORM_4PACK16"; break;
    case VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16      : return "B12X4G12X4R12X4G12X4_422_UNORM_4PACK16"; break;
    case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16  : return "G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16"; break;
    case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16   : return "G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16"; break;
    case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16  : return "G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16"; break;
    case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16   : return "G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16"; break;
    case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16  : return "G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16"; break;
    case VK_FORMAT_G16B16G16R16_422_UNORM                      : return "G16B16G16R16_422_UNORM"; break;
    case VK_FORMAT_B16G16R16G16_422_UNORM                      : return "B16G16R16G16_422_UNORM"; break;
    case VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM                : return "G16_B16_R16_3PLANE_420_UNORM"; break;
    case VK_FORMAT_G16_B16R16_2PLANE_420_UNORM                 : return "G16_B16R16_2PLANE_420_UNORM"; break;
    case VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM                : return "G16_B16_R16_3PLANE_422_UNORM"; break;
    case VK_FORMAT_G16_B16R16_2PLANE_422_UNORM                 : return "G16_B16R16_2PLANE_422_UNORM"; break;
    case VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM                : return "G16_B16_R16_3PLANE_444_UNORM"; break;
    case VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG                 : return "PVRTC1_2BPP_UNORM_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG                 : return "PVRTC1_4BPP_UNORM_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG                 : return "PVRTC2_2BPP_UNORM_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG                 : return "PVRTC2_4BPP_UNORM_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG                  : return "PVRTC1_2BPP_SRGB_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG                  : return "PVRTC1_4BPP_SRGB_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG                  : return "PVRTC2_2BPP_SRGB_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG                  : return "PVRTC2_4BPP_SRGB_BLOCK_IMG"; break;
  }
  return "<UNKNOWN>";
}

std::string ToString(VkFormat value)
{
  switch (value) {
    default                                                    : break;
    case VK_FORMAT_UNDEFINED                                   : return "VK_FORMAT_UNDEFINED"; break;
    case VK_FORMAT_R4G4_UNORM_PACK8                            : return "VK_FORMAT_R4G4_UNORM_PACK8"; break;
    case VK_FORMAT_R4G4B4A4_UNORM_PACK16                       : return "VK_FORMAT_R4G4B4A4_UNORM_PACK16"; break;
    case VK_FORMAT_B4G4R4A4_UNORM_PACK16                       : return "VK_FORMAT_B4G4R4A4_UNORM_PACK16"; break;
    case VK_FORMAT_R5G6B5_UNORM_PACK16                         : return "VK_FORMAT_R5G6B5_UNORM_PACK16"; break;
    case VK_FORMAT_B5G6R5_UNORM_PACK16                         : return "VK_FORMAT_B5G6R5_UNORM_PACK16"; break;
    case VK_FORMAT_R5G5B5A1_UNORM_PACK16                       : return "VK_FORMAT_R5G5B5A1_UNORM_PACK16"; break;
    case VK_FORMAT_B5G5R5A1_UNORM_PACK16                       : return "VK_FORMAT_B5G5R5A1_UNORM_PACK16"; break;
    case VK_FORMAT_A1R5G5B5_UNORM_PACK16                       : return "VK_FORMAT_A1R5G5B5_UNORM_PACK16"; break;
    case VK_FORMAT_R8_UNORM                                    : return "VK_FORMAT_R8_UNORM"; break;
    case VK_FORMAT_R8_SNORM                                    : return "VK_FORMAT_R8_SNORM"; break;
    case VK_FORMAT_R8_USCALED                                  : return "VK_FORMAT_R8_USCALED"; break;
    case VK_FORMAT_R8_SSCALED                                  : return "VK_FORMAT_R8_SSCALED"; break;
    case VK_FORMAT_R8_UINT                                     : return "VK_FORMAT_R8_UINT"; break;
    case VK_FORMAT_R8_SINT                                     : return "VK_FORMAT_R8_SINT"; break;
    case VK_FORMAT_R8_SRGB                                     : return "VK_FORMAT_R8_SRGB"; break;
    case VK_FORMAT_R8G8_UNORM                                  : return "VK_FORMAT_R8G8_UNORM"; break;
    case VK_FORMAT_R8G8_SNORM                                  : return "VK_FORMAT_R8G8_SNORM"; break;
    case VK_FORMAT_R8G8_USCALED                                : return "VK_FORMAT_R8G8_USCALED"; break;
    case VK_FORMAT_R8G8_SSCALED                                : return "VK_FORMAT_R8G8_SSCALED"; break;
    case VK_FORMAT_R8G8_UINT                                   : return "VK_FORMAT_R8G8_UINT"; break;
    case VK_FORMAT_R8G8_SINT                                   : return "VK_FORMAT_R8G8_SINT"; break;
    case VK_FORMAT_R8G8_SRGB                                   : return "VK_FORMAT_R8G8_SRGB"; break;
    case VK_FORMAT_R8G8B8_UNORM                                : return "VK_FORMAT_R8G8B8_UNORM"; break;
    case VK_FORMAT_R8G8B8_SNORM                                : return "VK_FORMAT_R8G8B8_SNORM"; break;
    case VK_FORMAT_R8G8B8_USCALED                              : return "VK_FORMAT_R8G8B8_USCALED"; break;
    case VK_FORMAT_R8G8B8_SSCALED                              : return "VK_FORMAT_R8G8B8_SSCALED"; break;
    case VK_FORMAT_R8G8B8_UINT                                 : return "VK_FORMAT_R8G8B8_UINT"; break;
    case VK_FORMAT_R8G8B8_SINT                                 : return "VK_FORMAT_R8G8B8_SINT"; break;
    case VK_FORMAT_R8G8B8_SRGB                                 : return "VK_FORMAT_R8G8B8_SRGB"; break;
    case VK_FORMAT_B8G8R8_UNORM                                : return "VK_FORMAT_B8G8R8_UNORM"; break;
    case VK_FORMAT_B8G8R8_SNORM                                : return "VK_FORMAT_B8G8R8_SNORM"; break;
    case VK_FORMAT_B8G8R8_USCALED                              : return "VK_FORMAT_B8G8R8_USCALED"; break;
    case VK_FORMAT_B8G8R8_SSCALED                              : return "VK_FORMAT_B8G8R8_SSCALED"; break;
    case VK_FORMAT_B8G8R8_UINT                                 : return "VK_FORMAT_B8G8R8_UINT"; break;
    case VK_FORMAT_B8G8R8_SINT                                 : return "VK_FORMAT_B8G8R8_SINT"; break;
    case VK_FORMAT_B8G8R8_SRGB                                 : return "VK_FORMAT_B8G8R8_SRGB"; break;
    case VK_FORMAT_R8G8B8A8_UNORM                              : return "VK_FORMAT_R8G8B8A8_UNORM"; break;
    case VK_FORMAT_R8G8B8A8_SNORM                              : return "VK_FORMAT_R8G8B8A8_SNORM"; break;
    case VK_FORMAT_R8G8B8A8_USCALED                            : return "VK_FORMAT_R8G8B8A8_USCALED"; break;
    case VK_FORMAT_R8G8B8A8_SSCALED                            : return "VK_FORMAT_R8G8B8A8_SSCALED"; break;
    case VK_FORMAT_R8G8B8A8_UINT                               : return "VK_FORMAT_R8G8B8A8_UINT"; break;
    case VK_FORMAT_R8G8B8A8_SINT                               : return "VK_FORMAT_R8G8B8A8_SINT"; break;
    case VK_FORMAT_R8G8B8A8_SRGB                               : return "VK_FORMAT_R8G8B8A8_SRGB"; break;
    case VK_FORMAT_B8G8R8A8_UNORM                              : return "VK_FORMAT_B8G8R8A8_UNORM"; break;
    case VK_FORMAT_B8G8R8A8_SNORM                              : return "VK_FORMAT_B8G8R8A8_SNORM"; break;
    case VK_FORMAT_B8G8R8A8_USCALED                            : return "VK_FORMAT_B8G8R8A8_USCALED"; break;
    case VK_FORMAT_B8G8R8A8_SSCALED                            : return "VK_FORMAT_B8G8R8A8_SSCALED"; break;
    case VK_FORMAT_B8G8R8A8_UINT                               : return "VK_FORMAT_B8G8R8A8_UINT"; break;
    case VK_FORMAT_B8G8R8A8_SINT                               : return "VK_FORMAT_B8G8R8A8_SINT"; break;
    case VK_FORMAT_B8G8R8A8_SRGB                               : return "VK_FORMAT_B8G8R8A8_SRGB"; break;
    case VK_FORMAT_A8B8G8R8_UNORM_PACK32                       : return "VK_FORMAT_A8B8G8R8_UNORM_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_SNORM_PACK32                       : return "VK_FORMAT_A8B8G8R8_SNORM_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_USCALED_PACK32                     : return "VK_FORMAT_A8B8G8R8_USCALED_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_SSCALED_PACK32                     : return "VK_FORMAT_A8B8G8R8_SSCALED_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_UINT_PACK32                        : return "VK_FORMAT_A8B8G8R8_UINT_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_SINT_PACK32                        : return "VK_FORMAT_A8B8G8R8_SINT_PACK32"; break;
    case VK_FORMAT_A8B8G8R8_SRGB_PACK32                        : return "VK_FORMAT_A8B8G8R8_SRGB_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_UNORM_PACK32                    : return "VK_FORMAT_A2R10G10B10_UNORM_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_SNORM_PACK32                    : return "VK_FORMAT_A2R10G10B10_SNORM_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_USCALED_PACK32                  : return "VK_FORMAT_A2R10G10B10_USCALED_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_SSCALED_PACK32                  : return "VK_FORMAT_A2R10G10B10_SSCALED_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_UINT_PACK32                     : return "VK_FORMAT_A2R10G10B10_UINT_PACK32"; break;
    case VK_FORMAT_A2R10G10B10_SINT_PACK32                     : return "VK_FORMAT_A2R10G10B10_SINT_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_UNORM_PACK32                    : return "VK_FORMAT_A2B10G10R10_UNORM_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_SNORM_PACK32                    : return "VK_FORMAT_A2B10G10R10_SNORM_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_USCALED_PACK32                  : return "VK_FORMAT_A2B10G10R10_USCALED_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_SSCALED_PACK32                  : return "VK_FORMAT_A2B10G10R10_SSCALED_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_UINT_PACK32                     : return "VK_FORMAT_A2B10G10R10_UINT_PACK32"; break;
    case VK_FORMAT_A2B10G10R10_SINT_PACK32                     : return "VK_FORMAT_A2B10G10R10_SINT_PACK32"; break;
    case VK_FORMAT_R16_UNORM                                   : return "VK_FORMAT_R16_UNORM"; break;
    case VK_FORMAT_R16_SNORM                                   : return "VK_FORMAT_R16_SNORM"; break;
    case VK_FORMAT_R16_USCALED                                 : return "VK_FORMAT_R16_USCALED"; break;
    case VK_FORMAT_R16_SSCALED                                 : return "VK_FORMAT_R16_SSCALED"; break;
    case VK_FORMAT_R16_UINT                                    : return "VK_FORMAT_R16_UINT"; break;
    case VK_FORMAT_R16_SINT                                    : return "VK_FORMAT_R16_SINT"; break;
    case VK_FORMAT_R16_SFLOAT                                  : return "VK_FORMAT_R16_SFLOAT"; break;
    case VK_FORMAT_R16G16_UNORM                                : return "VK_FORMAT_R16G16_UNORM"; break;
    case VK_FORMAT_R16G16_SNORM                                : return "VK_FORMAT_R16G16_SNORM"; break;
    case VK_FORMAT_R16G16_USCALED                              : return "VK_FORMAT_R16G16_USCALED"; break;
    case VK_FORMAT_R16G16_SSCALED                              : return "VK_FORMAT_R16G16_SSCALED"; break;
    case VK_FORMAT_R16G16_UINT                                 : return "VK_FORMAT_R16G16_UINT"; break;
    case VK_FORMAT_R16G16_SINT                                 : return "VK_FORMAT_R16G16_SINT"; break;
    case VK_FORMAT_R16G16_SFLOAT                               : return "VK_FORMAT_R16G16_SFLOAT"; break;
    case VK_FORMAT_R16G16B16_UNORM                             : return "VK_FORMAT_R16G16B16_UNORM"; break;
    case VK_FORMAT_R16G16B16_SNORM                             : return "VK_FORMAT_R16G16B16_SNORM"; break;
    case VK_FORMAT_R16G16B16_USCALED                           : return "VK_FORMAT_R16G16B16_USCALED"; break;
    case VK_FORMAT_R16G16B16_SSCALED                           : return "VK_FORMAT_R16G16B16_SSCALED"; break;
    case VK_FORMAT_R16G16B16_UINT                              : return "VK_FORMAT_R16G16B16_UINT"; break;
    case VK_FORMAT_R16G16B16_SINT                              : return "VK_FORMAT_R16G16B16_SINT"; break;
    case VK_FORMAT_R16G16B16_SFLOAT                            : return "VK_FORMAT_R16G16B16_SFLOAT"; break;
    case VK_FORMAT_R16G16B16A16_UNORM                          : return "VK_FORMAT_R16G16B16A16_UNORM"; break;
    case VK_FORMAT_R16G16B16A16_SNORM                          : return "VK_FORMAT_R16G16B16A16_SNORM"; break;
    case VK_FORMAT_R16G16B16A16_USCALED                        : return "VK_FORMAT_R16G16B16A16_USCALED"; break;
    case VK_FORMAT_R16G16B16A16_SSCALED                        : return "VK_FORMAT_R16G16B16A16_SSCALED"; break;
    case VK_FORMAT_R16G16B16A16_UINT                           : return "VK_FORMAT_R16G16B16A16_UINT"; break;
    case VK_FORMAT_R16G16B16A16_SINT                           : return "VK_FORMAT_R16G16B16A16_SINT"; break;
    case VK_FORMAT_R16G16B16A16_SFLOAT                         : return "VK_FORMAT_R16G16B16A16_SFLOAT"; break;
    case VK_FORMAT_R32_UINT                                    : return "VK_FORMAT_R32_UINT"; break;
    case VK_FORMAT_R32_SINT                                    : return "VK_FORMAT_R32_SINT"; break;
    case VK_FORMAT_R32_SFLOAT                                  : return "VK_FORMAT_R32_SFLOAT"; break;
    case VK_FORMAT_R32G32_UINT                                 : return "VK_FORMAT_R32G32_UINT"; break;
    case VK_FORMAT_R32G32_SINT                                 : return "VK_FORMAT_R32G32_SINT"; break;
    case VK_FORMAT_R32G32_SFLOAT                               : return "VK_FORMAT_R32G32_SFLOAT"; break;
    case VK_FORMAT_R32G32B32_UINT                              : return "VK_FORMAT_R32G32B32_UINT"; break;
    case VK_FORMAT_R32G32B32_SINT                              : return "VK_FORMAT_R32G32B32_SINT"; break;
    case VK_FORMAT_R32G32B32_SFLOAT                            : return "VK_FORMAT_R32G32B32_SFLOAT"; break;
    case VK_FORMAT_R32G32B32A32_UINT                           : return "VK_FORMAT_R32G32B32A32_UINT"; break;
    case VK_FORMAT_R32G32B32A32_SINT                           : return "VK_FORMAT_R32G32B32A32_SINT"; break;
    case VK_FORMAT_R32G32B32A32_SFLOAT                         : return "VK_FORMAT_R32G32B32A32_SFLOAT"; break;
    case VK_FORMAT_R64_UINT                                    : return "VK_FORMAT_R64_UINT"; break;
    case VK_FORMAT_R64_SINT                                    : return "VK_FORMAT_R64_SINT"; break;
    case VK_FORMAT_R64_SFLOAT                                  : return "VK_FORMAT_R64_SFLOAT"; break;
    case VK_FORMAT_R64G64_UINT                                 : return "VK_FORMAT_R64G64_UINT"; break;
    case VK_FORMAT_R64G64_SINT                                 : return "VK_FORMAT_R64G64_SINT"; break;
    case VK_FORMAT_R64G64_SFLOAT                               : return "VK_FORMAT_R64G64_SFLOAT"; break;
    case VK_FORMAT_R64G64B64_UINT                              : return "VK_FORMAT_R64G64B64_UINT"; break;
    case VK_FORMAT_R64G64B64_SINT                              : return "VK_FORMAT_R64G64B64_SINT"; break;
    case VK_FORMAT_R64G64B64_SFLOAT                            : return "VK_FORMAT_R64G64B64_SFLOAT"; break;
    case VK_FORMAT_R64G64B64A64_UINT                           : return "VK_FORMAT_R64G64B64A64_UINT"; break;
    case VK_FORMAT_R64G64B64A64_SINT                           : return "VK_FORMAT_R64G64B64A64_SINT"; break;
    case VK_FORMAT_R64G64B64A64_SFLOAT                         : return "VK_FORMAT_R64G64B64A64_SFLOAT"; break;
    case VK_FORMAT_B10G11R11_UFLOAT_PACK32                     : return "VK_FORMAT_B10G11R11_UFLOAT_PACK32"; break;
    case VK_FORMAT_E5B9G9R9_UFLOAT_PACK32                      : return "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32"; break;
    case VK_FORMAT_D16_UNORM                                   : return "VK_FORMAT_D16_UNORM"; break;
    case VK_FORMAT_X8_D24_UNORM_PACK32                         : return "VK_FORMAT_X8_D24_UNORM_PACK32"; break;
    case VK_FORMAT_D32_SFLOAT                                  : return "VK_FORMAT_D32_SFLOAT"; break;
    case VK_FORMAT_S8_UINT                                     : return "VK_FORMAT_S8_UINT"; break;
    case VK_FORMAT_D16_UNORM_S8_UINT                           : return "VK_FORMAT_D16_UNORM_S8_UINT"; break;
    case VK_FORMAT_D24_UNORM_S8_UINT                           : return "VK_FORMAT_D24_UNORM_S8_UINT"; break;
    case VK_FORMAT_D32_SFLOAT_S8_UINT                          : return "VK_FORMAT_D32_SFLOAT_S8_UINT"; break;
    case VK_FORMAT_BC1_RGB_UNORM_BLOCK                         : return "VK_FORMAT_BC1_RGB_UNORM_BLOCK"; break;
    case VK_FORMAT_BC1_RGB_SRGB_BLOCK                          : return "VK_FORMAT_BC1_RGB_SRGB_BLOCK"; break;
    case VK_FORMAT_BC1_RGBA_UNORM_BLOCK                        : return "VK_FORMAT_BC1_RGBA_UNORM_BLOCK"; break;
    case VK_FORMAT_BC1_RGBA_SRGB_BLOCK                         : return "VK_FORMAT_BC1_RGBA_SRGB_BLOCK"; break;
    case VK_FORMAT_BC2_UNORM_BLOCK                             : return "VK_FORMAT_BC2_UNORM_BLOCK"; break;
    case VK_FORMAT_BC2_SRGB_BLOCK                              : return "VK_FORMAT_BC2_SRGB_BLOCK"; break;
    case VK_FORMAT_BC3_UNORM_BLOCK                             : return "VK_FORMAT_BC3_UNORM_BLOCK"; break;
    case VK_FORMAT_BC3_SRGB_BLOCK                              : return "VK_FORMAT_BC3_SRGB_BLOCK"; break;
    case VK_FORMAT_BC4_UNORM_BLOCK                             : return "VK_FORMAT_BC4_UNORM_BLOCK"; break;
    case VK_FORMAT_BC4_SNORM_BLOCK                             : return "VK_FORMAT_BC4_SNORM_BLOCK"; break;
    case VK_FORMAT_BC5_UNORM_BLOCK                             : return "VK_FORMAT_BC5_UNORM_BLOCK"; break;
    case VK_FORMAT_BC5_SNORM_BLOCK                             : return "VK_FORMAT_BC5_SNORM_BLOCK"; break;
    case VK_FORMAT_BC6H_UFLOAT_BLOCK                           : return "VK_FORMAT_BC6H_UFLOAT_BLOCK"; break;
    case VK_FORMAT_BC6H_SFLOAT_BLOCK                           : return "VK_FORMAT_BC6H_SFLOAT_BLOCK"; break;
    case VK_FORMAT_BC7_UNORM_BLOCK                             : return "VK_FORMAT_BC7_UNORM_BLOCK"; break;
    case VK_FORMAT_BC7_SRGB_BLOCK                              : return "VK_FORMAT_BC7_SRGB_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK                     : return "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK                      : return "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK                   : return "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK                    : return "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK                   : return "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK"; break;
    case VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK                    : return "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK"; break;
    case VK_FORMAT_EAC_R11_UNORM_BLOCK                         : return "VK_FORMAT_EAC_R11_UNORM_BLOCK"; break;
    case VK_FORMAT_EAC_R11_SNORM_BLOCK                         : return "VK_FORMAT_EAC_R11_SNORM_BLOCK"; break;
    case VK_FORMAT_EAC_R11G11_UNORM_BLOCK                      : return "VK_FORMAT_EAC_R11G11_UNORM_BLOCK"; break;
    case VK_FORMAT_EAC_R11G11_SNORM_BLOCK                      : return "VK_FORMAT_EAC_R11G11_SNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_4x4_UNORM_BLOCK                        : return "VK_FORMAT_ASTC_4x4_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_4x4_SRGB_BLOCK                         : return "VK_FORMAT_ASTC_4x4_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_5x4_UNORM_BLOCK                        : return "VK_FORMAT_ASTC_5x4_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_5x4_SRGB_BLOCK                         : return "VK_FORMAT_ASTC_5x4_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_5x5_UNORM_BLOCK                        : return "VK_FORMAT_ASTC_5x5_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_5x5_SRGB_BLOCK                         : return "VK_FORMAT_ASTC_5x5_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_6x5_UNORM_BLOCK                        : return "VK_FORMAT_ASTC_6x5_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_6x5_SRGB_BLOCK                         : return "VK_FORMAT_ASTC_6x5_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_6x6_UNORM_BLOCK                        : return "VK_FORMAT_ASTC_6x6_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_6x6_SRGB_BLOCK                         : return "VK_FORMAT_ASTC_6x6_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_8x5_UNORM_BLOCK                        : return "VK_FORMAT_ASTC_8x5_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_8x5_SRGB_BLOCK                         : return "VK_FORMAT_ASTC_8x5_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_8x6_UNORM_BLOCK                        : return "VK_FORMAT_ASTC_8x6_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_8x6_SRGB_BLOCK                         : return "VK_FORMAT_ASTC_8x6_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_8x8_UNORM_BLOCK                        : return "VK_FORMAT_ASTC_8x8_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_8x8_SRGB_BLOCK                         : return "VK_FORMAT_ASTC_8x8_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_10x5_UNORM_BLOCK                       : return "VK_FORMAT_ASTC_10x5_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_10x5_SRGB_BLOCK                        : return "VK_FORMAT_ASTC_10x5_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_10x6_UNORM_BLOCK                       : return "VK_FORMAT_ASTC_10x6_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_10x6_SRGB_BLOCK                        : return "VK_FORMAT_ASTC_10x6_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_10x8_UNORM_BLOCK                       : return "VK_FORMAT_ASTC_10x8_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_10x8_SRGB_BLOCK                        : return "VK_FORMAT_ASTC_10x8_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_10x10_UNORM_BLOCK                      : return "VK_FORMAT_ASTC_10x10_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_10x10_SRGB_BLOCK                       : return "VK_FORMAT_ASTC_10x10_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_12x10_UNORM_BLOCK                      : return "VK_FORMAT_ASTC_12x10_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_12x10_SRGB_BLOCK                       : return "VK_FORMAT_ASTC_12x10_SRGB_BLOCK"; break;
    case VK_FORMAT_ASTC_12x12_UNORM_BLOCK                      : return "VK_FORMAT_ASTC_12x12_UNORM_BLOCK"; break;
    case VK_FORMAT_ASTC_12x12_SRGB_BLOCK                       : return "VK_FORMAT_ASTC_12x12_SRGB_BLOCK"; break;
    case VK_FORMAT_G8B8G8R8_422_UNORM                          : return "VK_FORMAT_G8B8G8R8_422_UNORM"; break;
    case VK_FORMAT_B8G8R8G8_422_UNORM                          : return "VK_FORMAT_B8G8R8G8_422_UNORM"; break;
    case VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM                   : return "VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM"; break;
    case VK_FORMAT_G8_B8R8_2PLANE_420_UNORM                    : return "VK_FORMAT_G8_B8R8_2PLANE_420_UNORM"; break;
    case VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM                   : return "VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM"; break;
    case VK_FORMAT_G8_B8R8_2PLANE_422_UNORM                    : return "VK_FORMAT_G8_B8R8_2PLANE_422_UNORM"; break;
    case VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM                   : return "VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM"; break;
    case VK_FORMAT_R10X6_UNORM_PACK16                          : return "VK_FORMAT_R10X6_UNORM_PACK16"; break;
    case VK_FORMAT_R10X6G10X6_UNORM_2PACK16                    : return "VK_FORMAT_R10X6G10X6_UNORM_2PACK16"; break;
    case VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16          : return "VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16"; break;
    case VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16      : return "VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16"; break;
    case VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16      : return "VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16"; break;
    case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16  : return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16"; break;
    case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16   : return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16"; break;
    case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16  : return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16"; break;
    case VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16   : return "VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16"; break;
    case VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16  : return "VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16"; break;
    case VK_FORMAT_R12X4_UNORM_PACK16                          : return "VK_FORMAT_R12X4_UNORM_PACK16"; break;
    case VK_FORMAT_R12X4G12X4_UNORM_2PACK16                    : return "VK_FORMAT_R12X4G12X4_UNORM_2PACK16"; break;
    case VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16          : return "VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16"; break;
    case VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16      : return "VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16"; break;
    case VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16      : return "VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16"; break;
    case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16  : return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16"; break;
    case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16   : return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16"; break;
    case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16  : return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16"; break;
    case VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16   : return "VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16"; break;
    case VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16  : return "VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16"; break;
    case VK_FORMAT_G16B16G16R16_422_UNORM                      : return "VK_FORMAT_G16B16G16R16_422_UNORM"; break;
    case VK_FORMAT_B16G16R16G16_422_UNORM                      : return "VK_FORMAT_B16G16R16G16_422_UNORM"; break;
    case VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM                : return "VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM"; break;
    case VK_FORMAT_G16_B16R16_2PLANE_420_UNORM                 : return "VK_FORMAT_G16_B16R16_2PLANE_420_UNORM"; break;
    case VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM                : return "VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM"; break;
    case VK_FORMAT_G16_B16R16_2PLANE_422_UNORM                 : return "VK_FORMAT_G16_B16R16_2PLANE_422_UNORM"; break;
    case VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM                : return "VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM"; break;
    case VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG                 : return "VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG                 : return "VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG                 : return "VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG                 : return "VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG                  : return "VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG                  : return "VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG                  : return "VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG"; break;
    case VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG                  : return "VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG"; break;
  }
  return "<UNKNOWN>";
}

std::string ToStringShort(VkColorSpaceKHR value)
{
  switch (value) {
    default                                          : break;
    case VK_COLOR_SPACE_SRGB_NONLINEAR_KHR           : return "SRGB_NONLINEAR"; break;
    case VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT     : return "DISPLAY_P3_NONLINEAR"; break;
    case VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT     : return "EXTENDED_SRGB_LINEAR"; break;
    case VK_COLOR_SPACE_DCI_P3_LINEAR_EXT            : return "DCI_P3_LINEAR"; break;
    case VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT         : return "DCI_P3_NONLINEAR"; break;
    case VK_COLOR_SPACE_BT709_LINEAR_EXT             : return "BT709_LINEAR"; break;
    case VK_COLOR_SPACE_BT709_NONLINEAR_EXT          : return "BT709_NONLINEAR"; break;
    case VK_COLOR_SPACE_BT2020_LINEAR_EXT            : return "BT2020_LINEAR"; break;
    case VK_COLOR_SPACE_HDR10_ST2084_EXT             : return "HDR10_ST2084"; break;
    case VK_COLOR_SPACE_DOLBYVISION_EXT              : return "DOLBYVISION"; break;
    case VK_COLOR_SPACE_HDR10_HLG_EXT                : return "HDR10_HLG"; break;
    case VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT          : return "ADOBERGB_LINEAR"; break;
    case VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT       : return "ADOBERGB_NONLINEAR"; break;
    case VK_COLOR_SPACE_PASS_THROUGH_EXT             : return "PASS_THROUGH"; break;
    case VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT  : return "EXTENDED_SRGB_NONLINEAR"; break;
  }
  return "<UNKNOWN>";
}

std::string ToString(VkColorSpaceKHR value) 
{
  switch (value) {
    default                                          : break;
    case VK_COLOR_SPACE_SRGB_NONLINEAR_KHR           : return "VK_COLOR_SPACE_SRGB_NONLINEAR_KHR"; break;
    case VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT     : return "VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT"; break;
    case VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT     : return "VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT"; break;
    case VK_COLOR_SPACE_DCI_P3_LINEAR_EXT            : return "VK_COLOR_SPACE_DCI_P3_LINEAR_EXT"; break;
    case VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT         : return "VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT"; break;
    case VK_COLOR_SPACE_BT709_LINEAR_EXT             : return "VK_COLOR_SPACE_BT709_LINEAR_EXT"; break;
    case VK_COLOR_SPACE_BT709_NONLINEAR_EXT          : return "VK_COLOR_SPACE_BT709_NONLINEAR_EXT"; break;
    case VK_COLOR_SPACE_BT2020_LINEAR_EXT            : return "VK_COLOR_SPACE_BT2020_LINEAR_EXT"; break;
    case VK_COLOR_SPACE_HDR10_ST2084_EXT             : return "VK_COLOR_SPACE_HDR10_ST2084_EXT"; break;
    case VK_COLOR_SPACE_DOLBYVISION_EXT              : return "VK_COLOR_SPACE_DOLBYVISION_EXT"; break;
    case VK_COLOR_SPACE_HDR10_HLG_EXT                : return "VK_COLOR_SPACE_HDR10_HLG_EXT"; break;
    case VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT          : return "VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT"; break;
    case VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT       : return "VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT"; break;
    case VK_COLOR_SPACE_PASS_THROUGH_EXT             : return "VK_COLOR_SPACE_PASS_THROUGH_EXT"; break;
    case VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT  : return "VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT"; break;
  }
  return "<UNKNOWN>";
}

std::string ToStringShort(VkPresentModeKHR value)
{
  switch (value) {
    default                                             : break;
    case VK_PRESENT_MODE_IMMEDIATE_KHR                  : return "IMMEDIATE"; break;
    case VK_PRESENT_MODE_MAILBOX_KHR                    : return "MAILBOX"; break;
    case VK_PRESENT_MODE_FIFO_KHR                       : return "FIFO"; break;
    case VK_PRESENT_MODE_FIFO_RELAXED_KHR               : return "FIFO_RELAXED"; break;
    case VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR      : return "SHARED_DEMAND_REFRESH"; break;
    case VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR  : return "SHARED_CONTINUOUS_REFRESH"; break;
  }
  return "<UNKNOWN>";
}

std::string ToString(VkPresentModeKHR value)
{
  switch (value) {
    default                                             : break;
    case VK_PRESENT_MODE_IMMEDIATE_KHR                  : return "VK_PRESENT_MODE_IMMEDIATE_KHR"; break;
    case VK_PRESENT_MODE_MAILBOX_KHR                    : return "VK_PRESENT_MODE_MAILBOX_KHR"; break;
    case VK_PRESENT_MODE_FIFO_KHR                       : return "VK_PRESENT_MODE_FIFO_KHR"; break;
    case VK_PRESENT_MODE_FIFO_RELAXED_KHR               : return "VK_PRESENT_MODE_FIFO_RELAXED_KHR"; break;
    case VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR      : return "VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR"; break;
    case VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR  : return "VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR"; break;
  }
  return "<UNKNOWN>";
}

std::string ToString(VkSharingMode value)
{
  switch (value) {
    default                         : break;
    case VK_SHARING_MODE_EXCLUSIVE  : return "VK_SHARING_MODE_EXCLUSIVE"; break;
    case VK_SHARING_MODE_CONCURRENT : return "VK_PRESENT_MODE_MAILBOX_KHR"; break;
  }
  return "<UNKNOWN>";
}

std::string ToString(VkSurfaceTransformFlagBitsKHR value)
{
  switch (value) {
    default                                                        : break;
    case VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR                     : return "VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR"; break;
    case VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR                    : return "VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR"; break;
    case VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR                   : return "VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR"; break;
    case VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR                   : return "VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR"; break;
    case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR            : return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR"; break;
    case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR  : return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR"; break;
    case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR : return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR"; break;
    case VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR : return "VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR"; break;
    case VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR                      : return "VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR"; break;
  }
  return "<UNKNOWN>";
}

std::string ToString(VkCompositeAlphaFlagBitsKHR value)
{
  switch (value) {
    default                                         : break;
    case VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR          : return "VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR"; break;
    case VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR  : return "VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR"; break;
    case VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR : return "VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR"; break;
    case VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR         : return "VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR"; break;
  }
  return "<UNKNOWN>";
}

std::string ToString(const VkExtent2D& value)
{
  std::stringstream ss;
  ss << value.width << "x" << value.height;
  return ss.str();
}

std::string ToStringVkDeviceQueueCreateFlags(const VkDeviceQueueCreateFlags& flags)
{
  std::stringstream ss;
  bool has_flag = false;

  if (flags & VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT) {
    ss << "VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT";
    has_flag = true;
  }

  return has_flag ? ss.str() : "0";
}

std::string ToStringVkDeviceCreateFlags(const VkDeviceCreateFlags& flags)
{
  std::stringstream ss;
  bool has_flag = false;
  return has_flag ? ss.str() : "0";
}

std::string ToStringVkSwapchainCreateFlags(const VkSwapchainCreateFlagsKHR& flags)
{
  std::stringstream ss;
  bool has_flag = false;

  if (flags & VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR) {
    ss << "VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR";
    has_flag = true;
  }

  if (flags & VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR) {
    if (has_flag) {
      ss << " | ";
    }
    ss << "VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR";
    has_flag = true;
  }

  if (flags & VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR) {
    if (has_flag) {
      ss << " | ";
    }
    ss << "VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR";
    has_flag = true;
  }  

  return has_flag ? ss.str() : "0";
}

std::string ToStringVkImageUsageFlags(const VkImageUsageFlags& flags)
{
  std::stringstream ss;
  bool has_flag = false;

  if (flags & VK_IMAGE_USAGE_TRANSFER_SRC_BIT) {
    ss << "VK_IMAGE_USAGE_TRANSFER_SRC_BIT";
    has_flag = true;
  }

  if (flags & VK_IMAGE_USAGE_TRANSFER_DST_BIT) {
    if (has_flag) {
      ss << " | ";
    }
    ss << "VK_IMAGE_USAGE_TRANSFER_DST_BIT";
    has_flag = true;
  }

  if (flags & VK_IMAGE_USAGE_SAMPLED_BIT) {
    if (has_flag) {
      ss << " | ";
    }
    ss << "VK_IMAGE_USAGE_SAMPLED_BIT";
    has_flag = true;
  }

  if (flags & VK_IMAGE_USAGE_STORAGE_BIT) {
    if (has_flag) {
      ss << " | ";
    }
    ss << "VK_IMAGE_USAGE_STORAGE_BIT";
    has_flag = true;
  }

  if (flags & VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT) {
    if (has_flag) {
      ss << " | ";
    }
    ss << "VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT";
    has_flag = true;
  }

  if (flags & VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT) {
    if (has_flag) {
      ss << " | ";
    }
    ss << "VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT";
    has_flag = true;
  }

  if (flags & VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT) {
    if (has_flag) {
      ss << " | ";
    }
    ss << "VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT";
    has_flag = true;
  }

  if (flags & VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT) {
    if (has_flag) {
      ss << " | ";
    }
    ss << "VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT";
    has_flag = true;
  }

  if (flags & VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV) {
    if (has_flag) {
      ss << " | ";
    }
    ss << "VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV";
    has_flag = true;
  }

  if (flags & VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT) {
    if (has_flag) {
      ss << " | ";
    }
    ss << "VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT";
    has_flag = true;
  }

  return has_flag ? ss.str() : "0";
}

std::string ToStringVkBool32(VkBool32 value)
{
  return value ? "VK_TRUE" : "VK_FALSE";
}

std::string ToStringVulkanApiVersion(uint32_t api_version, const vkex::TextFormat& format = vkex::TextFormat())
{
  std::stringstream ss;
  ss << VK_VERSION_MAJOR(api_version) << "." << VK_VERSION_MINOR(api_version) << "." << VK_VERSION_PATCH(api_version);
  return ss.str();
}

std::string ToString(const VkPhysicalDeviceFeatures& value, const vkex::TextFormat& format)
{
  const std::string sw = "  ";
  std::stringstream ss;

  ss << (format.skip_first_block_indent ? "" : format.block_indent);
  ss << "VkPhysicalDeviceFeatures features = {" << vkex::k_new_line;

  // clang-format off
  std::string indent = format.block_indent + sw;
  if (value.robustBufferAccess                     ) ss << indent << "robustBufferAccess"                       << " = " << ToStringVkBool32(value.robustBufferAccess) << vkex::k_new_line;
  if (value.fullDrawIndexUint32                    ) ss << indent << "fullDrawIndexUint32"                      << " = " << ToStringVkBool32(value.fullDrawIndexUint32) << vkex::k_new_line;
  if (value.imageCubeArray                         ) ss << indent << "imageCubeArray"                           << " = " << ToStringVkBool32(value.imageCubeArray) << vkex::k_new_line;
  if (value.independentBlend                       ) ss << indent << "independentBlend"                         << " = " << ToStringVkBool32(value.independentBlend) << vkex::k_new_line;
  if (value.geometryShader                         ) ss << indent << "geometryShader"                           << " = " << ToStringVkBool32(value.geometryShader) << vkex::k_new_line;
  if (value.tessellationShader                     ) ss << indent << "tessellationShader"                       << " = " << ToStringVkBool32(value.tessellationShader) << vkex::k_new_line;
  if (value.sampleRateShading                      ) ss << indent << "sampleRateShading"                        << " = " << ToStringVkBool32(value.sampleRateShading) << vkex::k_new_line;
  if (value.dualSrcBlend                           ) ss << indent << "dualSrcBlend"                             << " = " << ToStringVkBool32(value.dualSrcBlend) << vkex::k_new_line;
  if (value.logicOp                                ) ss << indent << "logicOp"                                  << " = " << ToStringVkBool32(value.logicOp) << vkex::k_new_line;
  if (value.multiDrawIndirect                      ) ss << indent << "multiDrawIndirect"                        << " = " << ToStringVkBool32(value.multiDrawIndirect) << vkex::k_new_line;
  if (value.drawIndirectFirstInstance              ) ss << indent << "drawIndirectFirstInstance"                << " = " << ToStringVkBool32(value.drawIndirectFirstInstance) << vkex::k_new_line;
  if (value.depthClamp                             ) ss << indent << "depthClamp"                               << " = " << ToStringVkBool32(value.depthClamp) << vkex::k_new_line;
  if (value.depthBiasClamp                         ) ss << indent << "depthBiasClamp"                           << " = " << ToStringVkBool32(value.depthBiasClamp) << vkex::k_new_line;
  if (value.fillModeNonSolid                       ) ss << indent << "fillModeNonSolid"                         << " = " << ToStringVkBool32(value.fillModeNonSolid) << vkex::k_new_line;
  if (value.depthBounds                            ) ss << indent << "depthBounds"                              << " = " << ToStringVkBool32(value.depthBounds) << vkex::k_new_line;
  if (value.wideLines                              ) ss << indent << "wideLines"                                << " = " << ToStringVkBool32(value.wideLines) << vkex::k_new_line;
  if (value.largePoints                            ) ss << indent << "largePoints"                              << " = " << ToStringVkBool32(value.largePoints) << vkex::k_new_line;
  if (value.alphaToOne                             ) ss << indent << "alphaToOne"                               << " = " << ToStringVkBool32(value.alphaToOne) << vkex::k_new_line;
  if (value.multiViewport                          ) ss << indent << "multiViewport"                            << " = " << ToStringVkBool32(value.multiViewport) << vkex::k_new_line;
  if (value.samplerAnisotropy                      ) ss << indent << "samplerAnisotropy"                        << " = " << ToStringVkBool32(value.samplerAnisotropy) << vkex::k_new_line;
  if (value.textureCompressionETC2                 ) ss << indent << "textureCompressionETC2"                   << " = " << ToStringVkBool32(value.textureCompressionETC2) << vkex::k_new_line;
  if (value.textureCompressionASTC_LDR             ) ss << indent << "textureCompressionASTC_LDR"               << " = " << ToStringVkBool32(value.textureCompressionASTC_LDR) << vkex::k_new_line;
  if (value.textureCompressionBC                   ) ss << indent << "textureCompressionBC"                     << " = " << ToStringVkBool32(value.textureCompressionBC) << vkex::k_new_line;
  if (value.occlusionQueryPrecise                  ) ss << indent << "occlusionQueryPrecise"                    << " = " << ToStringVkBool32(value.occlusionQueryPrecise) << vkex::k_new_line;
  if (value.pipelineStatisticsQuery                ) ss << indent << "pipelineStatisticsQuery"                  << " = " << ToStringVkBool32(value.pipelineStatisticsQuery) << vkex::k_new_line;
  if (value.vertexPipelineStoresAndAtomics         ) ss << indent << "vertexPipelineStoresAndAtomics"           << " = " << ToStringVkBool32(value.vertexPipelineStoresAndAtomics) << vkex::k_new_line;
  if (value.fragmentStoresAndAtomics               ) ss << indent << "fragmentStoresAndAtomics"                 << " = " << ToStringVkBool32(value.fragmentStoresAndAtomics) << vkex::k_new_line;
  if (value.shaderTessellationAndGeometryPointSize ) ss << indent << "shaderTessellationAndGeometryPointSize"   << " = " << ToStringVkBool32(value.shaderTessellationAndGeometryPointSize) << vkex::k_new_line;
  if (value.shaderImageGatherExtended              ) ss << indent << "shaderImageGatherExtended"                << " = " << ToStringVkBool32(value.shaderImageGatherExtended) << vkex::k_new_line;
  if (value.shaderStorageImageExtendedFormats      ) ss << indent << "shaderStorageImageExtendedFormats"        << " = " << ToStringVkBool32(value.shaderStorageImageExtendedFormats) << vkex::k_new_line;
  if (value.shaderStorageImageMultisample          ) ss << indent << "shaderStorageImageMultisample"            << " = " << ToStringVkBool32(value.shaderStorageImageMultisample) << vkex::k_new_line;
  if (value.shaderStorageImageReadWithoutFormat    ) ss << indent << "shaderStorageImageReadWithoutFormat"      << " = " << ToStringVkBool32(value.shaderStorageImageReadWithoutFormat) << vkex::k_new_line;
  if (value.shaderStorageImageWriteWithoutFormat   ) ss << indent << "shaderStorageImageWriteWithoutFormat"     << " = " << ToStringVkBool32(value.shaderStorageImageWriteWithoutFormat) << vkex::k_new_line;
  if (value.shaderUniformBufferArrayDynamicIndexing) ss << indent << "shaderUniformBufferArrayDynamicIndexing"  << " = " << ToStringVkBool32(value.shaderUniformBufferArrayDynamicIndexing) << vkex::k_new_line;
  if (value.shaderSampledImageArrayDynamicIndexing ) ss << indent << "shaderSampledImageArrayDynamicIndexing"   << " = " << ToStringVkBool32(value.shaderSampledImageArrayDynamicIndexing) << vkex::k_new_line;
  if (value.shaderStorageBufferArrayDynamicIndexing) ss << indent << "shaderStorageBufferArrayDynamicIndexing"  << " = " << ToStringVkBool32(value.shaderStorageBufferArrayDynamicIndexing) << vkex::k_new_line;
  if (value.shaderStorageImageArrayDynamicIndexing ) ss << indent << "shaderStorageImageArrayDynamicIndexing"   << " = " << ToStringVkBool32(value.shaderStorageImageArrayDynamicIndexing) << vkex::k_new_line;
  if (value.shaderClipDistance                     ) ss << indent << "shaderClipDistance"                       << " = " << ToStringVkBool32(value.shaderClipDistance) << vkex::k_new_line;
  if (value.shaderCullDistance                     ) ss << indent << "shaderCullDistance"                       << " = " << ToStringVkBool32(value.shaderCullDistance) << vkex::k_new_line;
  if (value.shaderFloat64                          ) ss << indent << "shaderFloat64"                            << " = " << ToStringVkBool32(value.shaderFloat64) << vkex::k_new_line;
  if (value.shaderInt64                            ) ss << indent << "shaderInt64"                              << " = " << ToStringVkBool32(value.shaderInt64) << vkex::k_new_line;
  if (value.shaderInt16                            ) ss << indent << "shaderInt16"                              << " = " << ToStringVkBool32(value.shaderInt16) << vkex::k_new_line;
  if (value.shaderResourceResidency                ) ss << indent << "shaderResourceResidency"                  << " = " << ToStringVkBool32(value.shaderResourceResidency) << vkex::k_new_line;
  if (value.shaderResourceMinLod                   ) ss << indent << "shaderResourceMinLod"                     << " = " << ToStringVkBool32(value.shaderResourceMinLod) << vkex::k_new_line;
  if (value.sparseBinding                          ) ss << indent << "sparseBinding"                            << " = " << ToStringVkBool32(value.sparseBinding) << vkex::k_new_line;
  if (value.sparseResidencyBuffer                  ) ss << indent << "sparseResidencyBuffer"                    << " = " << ToStringVkBool32(value.sparseResidencyBuffer) << vkex::k_new_line;
  if (value.sparseResidencyImage2D                 ) ss << indent << "sparseResidencyImage2D"                   << " = " << ToStringVkBool32(value.sparseResidencyImage2D) << vkex::k_new_line;
  if (value.sparseResidencyImage3D                 ) ss << indent << "sparseResidencyImage3D"                   << " = " << ToStringVkBool32(value.sparseResidencyImage3D) << vkex::k_new_line;
  if (value.sparseResidency2Samples                ) ss << indent << "sparseResidency2Samples"                  << " = " << ToStringVkBool32(value.sparseResidency2Samples) << vkex::k_new_line;
  if (value.sparseResidency4Samples                ) ss << indent << "sparseResidency4Samples"                  << " = " << ToStringVkBool32(value.sparseResidency4Samples) << vkex::k_new_line;
  if (value.sparseResidency8Samples                ) ss << indent << "sparseResidency8Samples"                  << " = " << ToStringVkBool32(value.sparseResidency8Samples) << vkex::k_new_line;
  if (value.sparseResidency16Samples               ) ss << indent << "sparseResidency16Samples"                 << " = " << ToStringVkBool32(value.sparseResidency16Samples) << vkex::k_new_line;
  if (value.sparseResidencyAliased                 ) ss << indent << "sparseResidencyAliased"                   << " = " << ToStringVkBool32(value.sparseResidencyAliased) << vkex::k_new_line;
  if (value.variableMultisampleRate                ) ss << indent << "variableMultisampleRate"                  << " = " << ToStringVkBool32(value.variableMultisampleRate) << vkex::k_new_line;
  if (value.inheritedQueries                       ) ss << indent << "inheritedQueries"                         << " = " << ToStringVkBool32(value.inheritedQueries) << vkex::k_new_line;
  // clang-format on

  ss << format.block_indent << "};";
  return ss.str();
}

std::string ToString(const VkApplicationInfo& application_info, const vkex::TextFormat& format)
{
  const std::string sw = "  ";
  std::stringstream ss;

  ss << (format.skip_first_block_indent ? "" : format.block_indent);
  ss << "VkInstanceCreateInfo create_info = {" << vkex::k_new_line;

  std::string indent = format.block_indent + sw;
  ss << indent << "sType"                   << " = " << ToString(application_info.sType) << vkex::k_new_line;
  ss << indent << "pNext"                   << " = " << ToPointerAddressString(application_info.pNext) << vkex::k_new_line;
  ss << indent << "pApplicationName"        << " = " << ToString(application_info.pApplicationName) << vkex::k_new_line;
  ss << indent << "applicationVersion"      << " = " << ToString(application_info.applicationVersion) << vkex::k_new_line;
  ss << indent << "pEngineName"             << " = " << ToString(application_info.pEngineName) << vkex::k_new_line;
  ss << indent << "engineVersion"           << " = " << ToString(application_info.engineVersion) << vkex::k_new_line;
  ss << indent << "apiVersion"              << " = " << ToStringVulkanApiVersion(application_info.apiVersion) << vkex::k_new_line;

  ss << format.block_indent << "};";
  return ss.str();
}

std::string ToString(const VkInstanceCreateInfo& create_info, const vkex::TextFormat& format)
{
  const std::string sw = "  ";
  std::stringstream ss;

  vkex::TextFormat application_info_format = vkex::TextFormat();
  application_info_format.block_indent = format.block_indent + sw;
  application_info_format.skip_first_block_indent = true;

  vkex::TextFormat array_format = vkex::TextFormat();
  array_format.block_indent = format.block_indent + sw;
  array_format.array_element_indent = sw;

  ss << format.block_indent << "VkInstanceCreateInfo create_info = {" << vkex::k_new_line;

  std::string indent = format.block_indent + sw;
  ss << indent << "sType"                   << " = " << ToString(create_info.sType) << vkex::k_new_line;
  ss << indent << "pNext"                   << " = " << ToPointerAddressString(create_info.pNext) << vkex::k_new_line;
  ss << indent << "pApplicationInfo"        << " = " << ToString(*create_info.pApplicationInfo, application_info_format) << vkex::k_new_line;
  ss << indent << "enabledLayerCount"       << " = " << create_info.enabledLayerCount << vkex::k_new_line;
  ss << indent << "ppEnabledLayerNames"     << " = " << ToArrayString(create_info.enabledLayerCount, create_info.ppEnabledLayerNames, array_format) << vkex::k_new_line;
  ss << indent << "enabledExtensionCount"   << " = " << create_info.enabledExtensionCount << vkex::k_new_line;
  ss << indent << "ppEnabledExtensionNames" << " = " << ToArrayString(create_info.enabledExtensionCount, create_info.ppEnabledExtensionNames, array_format) << vkex::k_new_line;

  ss << format.block_indent << "};";

  return ss.str();
}

std::string ToString(const VkDeviceQueueCreateInfo& create_info, const vkex::TextFormat& format)
{
  const std::string sw = "  ";
  std::stringstream ss;

  vkex::TextFormat array_format = vkex::TextFormat();
  array_format.block_indent = format.block_indent + sw + sw;
  array_format.array_element_indent = sw;

  ss << (format.skip_first_block_indent ? "" : format.block_indent);
  ss << "VkDeviceQueueCreateInfo create_info = {" << vkex::k_new_line;

  std::string indent = format.block_indent + format.array_struct_indent + sw;
  ss << indent << "sType"                   << " = " << ToString(create_info.sType) << vkex::k_new_line;
  ss << indent << "pNext"                   << " = " << ToPointerAddressString(create_info.pNext) << vkex::k_new_line;
  ss << indent << "flags"                   << " = " << ToStringVkDeviceQueueCreateFlags(create_info.flags) << vkex::k_new_line;
  ss << indent << "queueFamilyIndex"        << " = " << create_info.queueFamilyIndex << vkex::k_new_line;
  ss << indent << "queueCount"              << " = " << create_info.queueCount << vkex::k_new_line;
  ss << indent << "pQueuePriorities"        << " = " << ToArrayString(create_info.queueCount, create_info.pQueuePriorities, array_format) << vkex::k_new_line;

  indent = format.block_indent + format.array_struct_indent;
  ss << indent << "};";
  return ss.str();
}

std::string ToString(const VkDeviceCreateInfo& create_info, const vkex::TextFormat& format)
{
  const std::string sw = "  ";
  std::stringstream ss;

  vkex::TextFormat queue_array_format = vkex::TextFormat();
  queue_array_format.block_indent = format.block_indent + sw;
  queue_array_format.skip_first_block_indent = true;
  queue_array_format.array_element_indent = sw;
  queue_array_format.array_struct_indent = sw;

  vkex::TextFormat array_format = vkex::TextFormat();
  array_format.block_indent = format.block_indent + sw;
  array_format.array_element_indent = sw;

  vkex::TextFormat feature_format = vkex::TextFormat();
  feature_format.block_indent = format.block_indent + sw;
  feature_format.skip_first_block_indent = true;
  feature_format.array_element_indent = sw;

  ss << format.block_indent << "VkDeviceCreateInfo create_info = {" << vkex::k_new_line;

  std::string indent = format.block_indent + sw;
  ss << indent << "sType"                   << " = " << ToString(create_info.sType) << vkex::k_new_line;
  ss << indent << "pNext"                   << " = " << ToPointerAddressString(create_info.pNext) << vkex::k_new_line;
  ss << indent << "flags"                   << " = " << ToStringVkDeviceCreateFlags(create_info.flags) << vkex::k_new_line;
  ss << indent << "queueCreateInfoCount"    << " = " << create_info.queueCreateInfoCount<< vkex::k_new_line;
  ss << indent << "pQueueCreateInfos"       << " = " << ToArrayString(create_info.queueCreateInfoCount, create_info.pQueueCreateInfos, queue_array_format) << vkex::k_new_line;
  ss << indent << "enabledLayerCount"       << " = " << create_info.enabledLayerCount << vkex::k_new_line;
  ss << indent << "ppEnabledLayerNames"     << " = " << ToArrayString(create_info.enabledLayerCount, create_info.ppEnabledLayerNames, array_format) << vkex::k_new_line;
  ss << indent << "enabledExtensionCount"   << " = " << create_info.enabledExtensionCount << vkex::k_new_line;
  ss << indent << "ppEnabledExtensionNames" << " = " << ToArrayString(create_info.enabledExtensionCount, create_info.ppEnabledExtensionNames, array_format) << vkex::k_new_line;
  ss << indent << "pEnabledFeatures"        << " = " << ToString(*create_info.pEnabledFeatures, feature_format) << vkex::k_new_line;

  ss << format.block_indent << "};";

  return ss.str();
}

std::string ToString(const VkSwapchainCreateInfoKHR& create_info, const vkex::TextFormat& format)
{
  const std::string sw = "  ";
  std::stringstream ss;

  vkex::TextFormat array_format = vkex::TextFormat();
  array_format.block_indent = format.block_indent + sw;
  array_format.array_element_indent = sw;
  
  ss << format.block_indent << "VkSwapchainCreateInfoKHR create_info = {" << vkex::k_new_line;

  std::string indent = format.block_indent + sw;
  ss << indent << "sType"                  << " = " << ToString(create_info.sType) << vkex::k_new_line;
  ss << indent << "pNext"                  << " = " << ToPointerAddressString(create_info.pNext) << vkex::k_new_line;
  ss << indent << "flags"                  << " = " << ToStringVkSwapchainCreateFlags(create_info.flags) << vkex::k_new_line;
  ss << indent << "surface"                << " = " << ToVkHandleAddressString(create_info.surface) << vkex::k_new_line;
  ss << indent << "minImageCount"          << " = " << create_info.minImageCount << vkex::k_new_line;
  ss << indent << "imageFormat"            << " = " << ToString(create_info.imageFormat) << vkex::k_new_line;
  ss << indent << "imageColorSpace"        << " = " << ToString(create_info.imageColorSpace) << vkex::k_new_line;
  ss << indent << "imageExtent"            << " = " << ToString(create_info.imageExtent) << vkex::k_new_line;
  ss << indent << "imageArrayLayers"       << " = " << create_info.imageArrayLayers << vkex::k_new_line;
  ss << indent << "imageUsage"             << " = " << ToStringVkImageUsageFlags(create_info.imageUsage) << vkex::k_new_line;
  ss << indent << "imageSharingMode"       << " = " << ToString(create_info.imageSharingMode) << vkex::k_new_line;
  ss << indent << "queueFamilyIndexCount"  << " = " << create_info.queueFamilyIndexCount << vkex::k_new_line;
  ss << indent << "pQueueFamilyIndices"    << " = " << ToArrayString(create_info.queueFamilyIndexCount, create_info.pQueueFamilyIndices, array_format) << vkex::k_new_line;
  ss << indent << "preTransform"           << " = " << ToString(create_info.preTransform) << vkex::k_new_line;
  ss << indent << "compositeAlpha"         << " = " << ToString(create_info.compositeAlpha) << vkex::k_new_line;
  ss << indent << "presentMode"            << " = " << ToString(create_info.presentMode) << vkex::k_new_line;
  ss << indent << "clipped"                << " = " << ToStringVkBool32(create_info.clipped) << vkex::k_new_line;
  ss << indent << "oldSwapchain"           << " = " << ToVkHandleAddressString(create_info.oldSwapchain) << vkex::k_new_line;

  ss << format.block_indent << "};";

  return ss.str();
}



} // namespace vkex